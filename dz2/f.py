"""
F. Симметричная последовательность

Последовательность чисел назовем симметричной, если она одинаково читается как
слева направо, так и справа налево. Например, следующие последовательности
являются симметричными:
1 2 3 4 5 4 3 2 1
1 2 1 2 2 1 2 1

Вашей программе будет дана последовательность чисел. Требуется определить,
какое минимальное количество и каких чисел надо приписать в конец этой
последовательности, чтобы она стала симметричной.

Формат ввода
Сначала вводится число N — количество элементов исходной последовательности (1 ≤ N ≤ 100).
Далее идут N чисел — элементы этой последовательности, натуральные числа от 1 до 9.

Формат вывода
Выведите сначала число M — минимальное количество элементов, которое надо дописать
к последовательности, а потом M чисел (каждое — от 1 до 9) — числа,
которые надо дописать к последовательности.

Пример 1
Ввод	           Вывод
9                  0
1 2 3 4 5 4 3 2 1

Пример 2
Ввод	           Вывод
5                  3
1 2 1 2 2          1 2 1


Пример 3
Ввод	           Вывод
5                  4
1 2 3 4 5          4 3 2 1
"""


def input_data():
    n = int(input())
    nums = [int(x) for x in input().split()]
    return nums


def isPolindrome(nums: list, start=0):
    for i in range((len(nums) - start) // 2):
        if nums[start + i] != nums[-(i+1)]:
            return False
    return True


def work(nums: list):
    for i in range(len(nums)):
        if isPolindrome(nums, i):
            return list(reversed(nums[:i]))
    # Поидее мы сюда никогда не попадаем, но могут быть ошибки, когда функция ничего не возвращает
    return []


if __name__ == "__main__":
    # print(isPolindrome([1, 2, 3, 4, 5, 4, 3, 2, 1]))
    nums = input_data()
    adds = work(nums)
    if adds:
        print(len(adds))
        print(*adds)
    else:
        print(0)
