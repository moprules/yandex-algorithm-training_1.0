"""
J. Треугольники

Решение за n^2.
Проходит все тесты только на PyPy

Петя достаточно давно занимается в математическом кружке, поэтому он уже успел
не только правила выполнения простейших операций, но и такое достаточно сложное
понятие как симметрия. Для того, чтобы получше изучить симметрию Петя решил
начать с наиболее простых геометрических фигур – треугольников. Он скоро понял,
что осевой симметрией обладают так называемые равнобедренные треугольники.
Поэтому теперь Петя ищет везде такие треугольники.

Напомним, что треугольник называется равнобедренным, если его площадь
положительна, и у него есть хотя бы две равные стороны.

Недавно Петя, зайдя в класс, увидел, что на доске нарисовано n точек. Разумеется,
он сразу задумался, сколько существует троек из этих точек, которые являются
вершинами равнобедренных треугольников.

Требуется написать программу, решающую указанную задачу.

Формат ввода
Входной файл содержит целое число n (3 <= n <= 1500). Каждая из последующих
строк содержит по два целых числа – xi и yi – координаты i-ой точки.
Координаты точек не превосходят 10^9 по абсолютной величине.
Среди заданных точек нет совпадающих.

Формат вывода
В выходной файл выведите ответ на задачу.

Пример 1
Ввод
3
0 0
2 2
-2 2
Вывод
1

Пример 2
Ввод
4
0 0
1 1
1 0
0 1
Вывод
4
"""


def input_data():
    n = int(input())
    x = []
    y = []
    for i in range(n):
        xi, yi = map(int, input().split())
        x.append(xi)
        y.append(yi)
    return n, x, y


def solve(n, x, y):
    # Переменная для ответа - количество равнобедренных треугольников
    cnt_triangles = 0
    for i in range(n):
        # множество для отслежимания вершин
        verticals = set()
        # словарь для подсчёта количества сторон треугольника с длиной l
        sides = {}
        for j in range(n):
            # если точка i не является точкой j
            if i != j:
                # вычисляем координаты точки j относительно i
                cx = x[i] - x[j]
                cy = y[i] - y[j]
                # Добавляем текущую вершину в множество учтеных вершин
                verticals.add((cx, cy))
                # Квадрат расстояние между точками i и j
                l = cx**2 + cy**2
                # Увеличиваем счётчик сторон треугольника с длиной l
                if l not in sides:
                    sides[l] = 0
                sides[l] += 1
                # Количество треугольников будет считаться как сумма
                # арифметической последовательности
                # 1 сторона: s(1) = 0 равнобедренных треугольников
                # 2 стороны: s(2) = 1 равнобедренный треугольник
                # 3 стороны: s(3) = 3, к 1 треугольнику прибавляется 2
                # 4 сторны:  s(4) = 6, к 3 треугольникам добавляется 3
                # n сторон:  s(n) = s(n-1) + n-1
                # n - количество отрезков равной длины, с одной вершиной в точке i
                cnt_triangles += sides[l]-1

                # Если уже была вершина противоположная текущей
                if (-cx, -cy) in verticals:
                    # То нужно удалить случай равнобедренного треугольника
                    # с углом 180 градусов, или треугольник с нулевой
                    # площадью
                    cnt_triangles -= 1

    return cnt_triangles


if __name__ == "__main__":
    n, x, y = input_data()
    res = solve(n, x, y)
    print(res)
