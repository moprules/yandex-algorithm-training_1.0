"""
H. Подстрока

В этой задаче Вам требуется найти максимальную по длине подстроку данной строки,
такую что каждый символ встречается в ней не более k раз.

Формат ввода
В первой строке даны два целых числа n и k (1 <= n <= 100000, 1 <= k <= n ), где
n – количество символов в строке. Во второй строке n символов – данная строка,
состоящая только из строчных латинских букв.

Формат вывода
В выходной файл выведите два числа – длину искомой подстроки и номер её первого
символа. Если решений несколько, выведите любое.

Пример 1
Ввод
3 1
abb
Вывод
2 1

Пример 2
Ввод
5 2
ababa
Вывод
4 1
"""


def input_data():
    n, k = map(int, input().split())
    s = input()
    return n, s, k


def solve(n, s, k):
    # словарь для подсчёта символов в строке
    cnt = {}
    # номер позиции начала максимальной подстроки
    start_pos = 1
    # максимальная длина подстроки
    max_len = 1
    # индекс начала текущей подстроки
    cur_index_start = 0
    # текущая длина подстроки
    cur_len = 0
    # перебираем посимвольно строку
    for right_char in s:
        # увеличиваем счётчик для этого символа
        if right_char not in cnt:
            cnt[right_char] = 0
        cnt[right_char] += 1
        # увеличиваем длину текущей подстроки
        cur_len += 1

        while cnt[right_char] > k:
            # удаляем начало подстроки из счётчика
            cnt[s[cur_index_start]] -= 1
            # двигаем начало подстроки вправо
            cur_index_start += 1
            # уменьшаем длину подстроки
            cur_len -= 1

        if cur_len > max_len:
            # задаём максимальную подстроку
            max_len = cur_len
            # номер позиции больше индекса на единицу
            start_pos = cur_index_start + 1

    # Возвращаем длину подстроки и позицию начала этой подстроки
    return max_len, start_pos


if __name__ == "__main__":
    n, s, k = input_data()
    res = solve(n, s, k)
    print(*res)
